package com.example;

// SDK v2 Imports
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sns.SnsClient;
import software.amazon.awssdk.services.sns.model.PublishRequest;
import software.amazon.awssdk.services.sns.model.PublishResponse;
import software.amazon.awssdk.services.sns.model.MessageAttributeValue;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.DeleteMessageRequest;
import software.amazon.awssdk.services.sqs.model.Message;
import software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest;
// Import SQS MessageAttributeValue with fully qualified name when needed

import org.json.JSONObject;
import org.testng.*;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;


/**
 * This class demonstrates how to send a message to an AWS SNS topic and verify
 * that it appears in a subscribed SQS queue using credentials from gimme-aws-creds.
 */
public class SimplifiedAwsSnsAndSqsTest {

    // AWS resource identifiers - replace with your actual values
    private static final String SNS_TOPIC_ARN = "YOUR_SNS_TOPIC_ARN";  // ARN of the SNS topic to publish to
    private static final String SQS_QUEUE_URL = "YOUR_SQS_QUEUE_URL";  // URL of the SQS queue to check for messages
    private static final Region REGION = Region.US_EAST_1;  // AWS region where your resources are located (SDK v2)
    private static final String JSON_FILE_PATH = "src/test/resources/jsons/message_payload.json";
    
    // Will hold the AWS credentials loaded from the credentials file (SDK v2)
    private static AwsCredentials awsCredentials;
    
    /**
     * Setup method that runs once before any tests.
     * Loads AWS credentials from the credentials file generated by gimme-aws-creds.
     */
    @BeforeClass
    public static void setup() throws IOException {
        // Load AWS credentials from gimme-aws-creds output file
        awsCredentials = loadGimmeAwsCredentials();
    }
    
    /**
     * Loads AWS credentials from the credentials file generated by gimme-aws-creds.
     * This file is typically located at ~/.aws/credentials.
     * 
     * @return AwsCredentials object containing the access key and secret key (SDK v2)
     * @throws IOException if the credentials file cannot be read or does not contain valid credentials
     */
    private static AwsCredentials loadGimmeAwsCredentials() throws IOException {
        String credentialsFilePath = System.getProperty("user.home") + "/.aws/credentials";
        Properties props = new Properties();
        
        try (FileInputStream fis = new FileInputStream(credentialsFilePath)) {
            props.load(fis);
        }
        
        String accessKeyId = props.getProperty("aws_access_key_id");
        String secretAccessKey = props.getProperty("aws_secret_access_key");
        
        if (accessKeyId == null || secretAccessKey == null) {
            throw new IOException("Could not find AWS credentials in the credentials file.");
        }
        
        return AwsBasicCredentials.create(accessKeyId, secretAccessKey);
    }

    /**
     * Alternative method to get credentials using AWS SDK's built-in providers
     */
    private static StaticCredentialsProvider getCredentialsProvider() {
        // Option 1: Use DefaultCredentialsProvider (checks multiple sources)
        return StaticCredentialsProvider.create(
            DefaultCredentialsProvider.create().resolveCredentials()
        );
        
        // Option 2: Use ProfileCredentialsProvider (for specific profile)
        // return ProfileCredentialsProvider.create("default");
    }
    
    /**
     * Helper method for creating AWS service clients
     */
    private static <T extends software.amazon.awssdk.core.SdkClient> T createAwsClient(
            Function<? super software.amazon.awssdk.core.client.builder.SdkClientBuilder<?, T>,
            software.amazon.awssdk.core.client.builder.SdkClientBuilder<?, T>> builderCustomizer) {
        
        // This is a simplified version - in a real implementation, you would need to handle
        // the specific builder types for each service
        throw new UnsupportedOperationException("This is a placeholder method that needs implementation");
    }
    
    /**
     * Load AWS credentials from a specific profile
     */
    private static AwsCredentials loadAwsCredentials(String profileName) throws IOException {
        ProfileCredentialsProvider provider = ProfileCredentialsProvider.create(profileName);
        return provider.resolveCredentials();
    }

    /**
     * Test method that demonstrates sending a message to an SNS topic and verifying
     * that it appears in a subscribed SQS queue.
     * 
     * @throws InterruptedException if the thread is interrupted while sleeping
     */
    @Test
    public void testSendMessageToSnsAndVerifyInSqs() throws InterruptedException, IOException {
        // Create a unique message ID to track the message
        String messageId = UUID.randomUUID().toString();
        
        // Read the JSON payload from the file
        String jsonContent = new String(Files.readAllBytes(Paths.get(JSON_FILE_PATH)));
        
        // Parse the JSON content and add the messageId for tracking
        JSONObject jsonPayload = new JSONObject(jsonContent);
        jsonPayload.put("id", messageId);  // Add the messageId to the JSON for tracking
        String message = jsonPayload.toString();
        
        System.out.println("Using message payload: " + message);

        // Initialize SNS client with gimme-aws-creds credentials (SDK v2)
        SnsClient snsClient = SnsClient.builder()
                .region(REGION)
                .credentialsProvider(StaticCredentialsProvider.create(awsCredentials))
                .build();

        // Create message attributes
        Map<String, MessageAttributeValue> messageAttributes = new HashMap<>();
        
        // Add a string attribute
        messageAttributes.put("AttributeType", MessageAttributeValue.builder()
                .dataType("String")
                .stringValue("TestAttribute")
                .build());
                
        // Add a number attribute
        messageAttributes.put("Priority", MessageAttributeValue.builder()
                .dataType("Number")
                .stringValue("1")  // Even for Number type, the value is passed as a string
                .build());
                
        // Add a custom attribute with application-specific data
        messageAttributes.put("Source", MessageAttributeValue.builder()
                .dataType("String")
                .stringValue(jsonPayload.optString("source", "unknown"))  // Use the source from the JSON file
                .build());

        // Publish message to SNS topic with message attributes (SDK v2)
        PublishRequest publishRequest = PublishRequest.builder()
                .topicArn(SNS_TOPIC_ARN)
                .message(message)
                .messageAttributes(messageAttributes)  // Add the message attributes here
                .build();
        PublishResponse publishResult = snsClient.publish(publishRequest);
        
        // Log the message ID returned by SNS for debugging purposes
        System.out.println("Message published to SNS. MessageId: " + publishResult.messageId());

        // Initialize SQS client with gimme-aws-creds credentials (SDK v2)
        SqsClient sqsClient = SqsClient.builder()
                .region(REGION)
                .credentialsProvider(StaticCredentialsProvider.create(awsCredentials))
                .build();

        // Wait for the message to propagate from SNS to SQS
        // This delay is necessary because message delivery is not instantaneous
        TimeUnit.SECONDS.sleep(5);

        // Check SQS queue for the message
        boolean messageFound = false;
        int maxAttempts = 5;  // Maximum number of attempts to find the message
        
        // Try multiple times to find the message, with delays between attempts
        for (int attempt = 0; attempt < maxAttempts && !messageFound; attempt++) {
            // Create a request to receive messages from the SQS queue (SDK v2)
            // Make sure to request message attributes in the receive request
            ReceiveMessageRequest receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(SQS_QUEUE_URL)
                    .maxNumberOfMessages(10)
                    .waitTimeSeconds(5)
                    .messageAttributeNames("All")  // Request all message attributes
                    .build();
            
            // Receive messages from the SQS queue (SDK v2)
            List<Message> messages = sqsClient.receiveMessage(receiveRequest).messages();
            
            // Check each message to see if it contains our unique message ID
            for (Message sqsMessage : messages) {
                String body = sqsMessage.body();
                System.out.println("Received message: " + body);
                
                // When a message is sent from SNS to SQS, SNS wraps the original message
                // in additional JSON with metadata. We just need to check if our message ID
                // is contained somewhere in this wrapped message.
                if (body.contains(String.valueOf(messageId))) {
                    messageFound = true;
                    
                    // Print any message attributes that were received
                    Map<String, software.amazon.awssdk.services.sqs.model.MessageAttributeValue> receivedAttributes = 
                            sqsMessage.messageAttributes();
                    
                    if (receivedAttributes != null && !receivedAttributes.isEmpty()) {
                        System.out.println("Received message attributes:");
                        for (Map.Entry<String, software.amazon.awssdk.services.sqs.model.MessageAttributeValue> entry : 
                                receivedAttributes.entrySet()) {
                            System.out.println(entry.getKey() + ": " + entry.getValue().stringValue());
                        }
                    } else {
                        System.out.println("No message attributes received");
                    }
                    
                    // Delete the message from the queue after verification (SDK v2)
                    DeleteMessageRequest deleteRequest = DeleteMessageRequest.builder()
                            .queueUrl(SQS_QUEUE_URL)
                            .receiptHandle(sqsMessage.receiptHandle())
                            .build();
                    sqsClient.deleteMessage(deleteRequest);
                    break;
                }
            }
            
            // If we haven't found the message yet, wait before trying again
            if (!messageFound) {
                System.out.println("Message not found, waiting before next attempt...");
                TimeUnit.SECONDS.sleep(2);
            }
        }

        // Assert that the message was found in the SQS queue
        // This will cause the test to fail if the message was not found
        Assert.assertTrue(messageFound, "Message with ID " + messageId + " not found in SQS queue.");
    }
}

